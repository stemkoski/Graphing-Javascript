graph.html: simple grapher of points and/or segments; includes class ParametricCurve

graph-2.html: rewrite using math.js (https://mathjs.org/): allows coordinate function input as strings

graph-3.html: added ParametricCurve function getEquispacedPoints(numPoints), includes calculating segment lengths and estimating total arclength from beginning of curve to each point (needed to generate equally spaced points)

graph-4.html: lots of name changes. Vertex: data structure that contains position, etc. 
calculate and graph tangent and normal vectors to curve at sample points. 

graph-5.html: redo graph-4, add percentArclength parameter in [0,1] to each vertex in array; automatically generate an internal vertex array for a function, refactor binary search into getVertexAtPercentArclength, requires lots of lerping, and then redo getEquispacedVertexArray

graph-6.html: add getHoistPosition(u,v) - domain [0,1] x [0,1] - and test with graphHoistPoints(F, uPointNum, vPointNum). Later, may need to add 'backfilling' to get enough points around curve.

graph-7.html: load an image, create a ColorSampler to extra pixel data (similar to texture in GPU shader - first pass: nearest neighbor, second pass bilinear filtering)

graph-8.html: cleaning up the code from version 7. adding in setTimeout, otherwise single-threading blocks animation loop from updating and page freezes during computations.
TODO: add timer to code to calculate total runtime
TODO: investigate speeding up hoist calculation - replace getVertexAtPercentArclength with getApproxVertex, by pre-calculating many many points (10,000?)

graph-9.html: code cleanup

graph-A.html: add jQueryUI

graph-B.html: feature complete

graph-C.html: switch to tab-based interface

graph-D.html: add save/load data functionality

